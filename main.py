from os import getenv, getcwd
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from dotenv import load_dotenv
import discord
from discord.utils import get
from table2ascii import table2ascii, PresetStyle
from datetime import date

es = 'ES'
nq = 'NQ'
rty = 'RTY'
rut = 'RUT'
spx = 'SPX'
ndx = 'NDX'
spy = 'SPY'
qqq = 'QQQ'

valid_symbols = [es, nq, rty, rut, spx, ndx, spy, qqq]
single_column_symbols = [spy, qqq]

total_levels = {}
headers = {
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36'}

messages = []
ignore_symbols_in_messages = [ndx, rty, rut]

discord_client = discord.Client()


def init():
    # ES will return ES/SPX
    # NQ will return NQ/NDX
    # RTY will return RTY/RUT
    links = {
        es: getenv(es),
        nq: getenv(nq),
        rty: getenv(rty),
        spy: getenv(spy),
        qqq: getenv(qqq)
    }

    for link in links:
        if link in single_column_symbols and links[link]:
            total_levels.update(get_levels_single_column(links[link]))
        else:
            if links[link]:
                total_levels.update(get_levels(links[link]))
    create_tos_script()


def get_levels(url):
    levels = {}
    response = requests.get(url, headers=headers)

    if (response.status_code == 200):
        soup = BeautifulSoup(response.content, 'lxml')
        table = soup.find('table')

        first_row = 0
        column_one_key = ''
        column_two_key = ''

        for row in table.find_all('tr'):
            column_one = row.find_all('td')[0].contents[0]
            column_two = row.find_all('td')[1].contents[0]
            column_three = row.find_all('td')[2].contents[0].replace(' ', '')

            if (first_row == 0):
                # Create the key
                column_one_key = column_one.split()[0]
                column_two_key = column_two.split()[0]
                levels[column_one_key] = {}
                levels[column_two_key] = {}

                first_row += 1
            else:
                # Add values
                if (column_one.isnumeric()):
                    levels[column_one_key][column_three] = column_one
                    levels[column_two_key][column_three] = column_two
    else:
        print(f'{response.status_code} received at {url}')

    return levels


def get_levels_single_column(url):
    levels = {}
    response = requests.get(url, headers=headers)

    if (response.status_code == 200):
        soup = BeautifulSoup(response.content, 'lxml')
        table = soup.find('table')

        first_row = 0
        column_one_key = ''

        for row in table.find_all('tr'):
            column_one = row.find_all('td')[0].contents[0]
            column_three = row.find_all('td')[2].contents[0].replace(' ', '')

            if (first_row == 0):
                # Create the key
                column_one_key = column_one.split()[0]
                levels[column_one_key] = {}

                first_row += 1
            else:
                # Add values
                if (column_one.isnumeric()):
                    levels[column_one_key][column_three] = column_one
    else:
        print(f'{response.status_code} received at {url}')

    return levels


def create_tos_script():
    f = open('levels.txt', 'w')
    f.write(f'# Autogenerated on {datetime.now()}\n\n')
    f.write(get_line_colors() + '\n')

    for symbol in total_levels:
        if symbol in valid_symbols:
            levels = total_levels[symbol]

            tos_scripts = f'\n\n#### {symbol} ####\n'

            for level in levels:
                tos_scripts += get_line(symbol, level, levels[level])

            f.write(tos_scripts)

    f.close()


def get_line_colors():
    # Use RGB for different colors (vt) is for the volatility trigger (zg) is for zero gamma
    return 'def vtR = 212; def vtG = 25; def vtB = 25; def r = 222; def g = 202; def b = 226; def zgR = 208; def zgG = 215; def zgB = 17;'


def get_tos_symbol(symbol):
    futures = [es, nq, rty]

    return symbol if symbol not in futures else f'/{symbol}:XCME'


def get_line_color(level, plot_variable):
    if level == 'VolTrig':
        return f'{plot_variable}.SetDefaultColor(createcolor(vtR, vtG, vtB));\n\n'
    elif level == 'ZeroGamma':
        return f'{plot_variable}.SetDefaultColor(createcolor(zgR, zgG, zgB));\n\n'

    return f'{plot_variable}.SetDefaultColor(createcolor(r, g, b));\n\n'


def get_line(symbol, level, numeric_value):
    tos_symbol = get_tos_symbol(symbol)
    plot_variable = f'{symbol}_{level}'
    plot = f'plot {plot_variable} = if (GetSymbol() == "{tos_symbol}") then {numeric_value} else Double.NAN;\n'
    plot_set_style = f'{plot_variable}.SetStyle(Curve.SHORT_DASH);\n'
    plot_set_color = get_line_color(level, plot_variable)

    return plot + plot_set_style + plot_set_color


@discord_client.event
async def on_ready():
    CHANNEL_ID_LEVELS = int(getenv('CHANNEL_ID_LEVELS'))
    channel = discord_client.get_channel(CHANNEL_ID_LEVELS)
    today = f'{datetime.today():%m-%d-%Y}'

    for symbol in total_levels:
        if symbol not in ignore_symbols_in_messages:
            header = ['Level', 'Value']
            body = []
            column_widths = [len(total_levels[symbol])] * 2

            for level in total_levels[symbol]:
                body.append([level, total_levels[symbol].get(level)])

            output = table2ascii(
                header, body, column_widths, style=PresetStyle.ascii_box)

            await channel.send(f'```\n {symbol} {today} \n {output} \n```')

    file_to_upload = f'{getcwd()}/levels.txt'
    await channel.send('*** Text file with thinkScript. See pinned messages for more info. ***', file=discord.File(file_to_upload))

    exit()

if __name__ == '__main__':
    load_dotenv()
    init()
    discord_client.run(getenv('BOT_TOKEN'))
